services:
  clickhouse:
    image: clickhouse/clickhouse-server:25.1.3.23
    ports:
      - "8123:8123"   # HTTP interface
      - "9002:9002"   # Native interface
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    environment:
      CLICKHOUSE_DB: blockchain
      CLICKHOUSE_USER: default
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
      CLICKHOUSE_PASSWORD: clickhouse
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    networks:
      - default
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - default
  minio:
    image: minio/minio
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server --console-address ":9001" /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - default
  # MinIO client for bucket creation and setup
  mc:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      sleep 5 &&
      mc alias set myminio http://minio:9000 minioadmin minioadmin &&
      mc mb myminio/blockchain-data --ignore-existing &&
      exit 0;
      "
    networks:
      - default
  # Add Iceberg REST catalog service
  iceberg-rest:
    image: tabulario/iceberg-rest:0.6.0
    ports:
      - "8181:8181"
    environment:
      # Basic catalog config
      CATALOG_IMPL: org.apache.iceberg.hadoop.HadoopCatalog
      CATALOG_WAREHOUSE: s3a://blockchain-data/iceberg-s3
      
      # S3/MinIO config
      CATALOG_IO__IMPL: org.apache.iceberg.aws.s3.S3FileIO
      CATALOG_S3_IMPL: org.apache.hadoop.fs.s3a.S3AFileSystem
      CATALOG_S3_ENDPOINT: http://minio:9000
      CATALOG_S3_ACCESS_KEY_ID: minioadmin
      CATALOG_S3_SECRET_ACCESS_KEY: minioadmin
      CATALOG_S3_PATH_STYLE_ACCESS: "true"
      
      # AWS settings
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      AWS_SDK_LOAD_CONFIG: "false"
      AWS_EC2_METADATA_DISABLED: "true"
      
      # Java options for better stability
      JAVA_OPTS: >-
        -Xms1g
        -Xmx2g
        -Daws.region=us-east-1
        -Daws.s3.endpoint=http://minio:9000
        -Daws.s3.path-style-access=true
        -Dfs.s3a.endpoint=http://minio:9000
        -Dfs.s3a.access.key=minioadmin
        -Dfs.s3a.secret.key=minioadmin
        -Dfs.s3a.path.style.access=true
        -Dfs.s3a.impl=org.apache.hadoop.fs.s3a.S3AFileSystem
        -Dfs.s3a.connection.ssl.enabled=false
        -Diceberg.rest.catalog.impl=org.apache.iceberg.hadoop.HadoopCatalog
        -Diceberg.rest.catalog.warehouse=s3a://blockchain-data/iceberg-s3
        -Diceberg.rest.catalog.io-impl=org.apache.iceberg.aws.s3.S3FileIO
    networks:
      - default
    depends_on:
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8181/v1/config", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

networks:
  default:
    name: cherry_network  # Optional: give the default network a specific name

volumes:
  postgres_data:
  minio_data:
  clickhouse_data: